/*
올 여름 출시된 RPG 게임 "SHOW ME THE DUNGEON"은 주인공 시루가 몬스터에게 침략당한 마을을 구하는 내용의 게임이다.
배경이 되는 나라는 0,1,2...N번의 번호가 붙어있는 N+1개의 마을로 이루어져 있다.
0번 마을과 1, 2, ..., N번 마을을 오갈 수 있는 도로가 존재하고 이 밖의 도로는 존재하지 않는다.
즉, N개의 도로가 존재한다.

게임이 시작하면 시루는 0번 마을에 위치하게 되며, 0번 마을을 제외한 1, 2, ..., N번 마을에는 몬스터가 각각 한 마리씩 있다.
시루는 마을을 방문할 때 도로를 통해 이동하며, 어떤 마을에서 다른 마을로 이동하기 위해서는 0번 마을을 거쳐야만 한다.
시루는 몇 개의 마을을 선택해 적당한 순서로 방문해 몬스터와 싸울 것이다.

 i번째 마을에 있는 몬스터의 공격력은 A이고 해당 마을에 P명의 주민이 있다.
시루는 어떤 마을을 방문하면 몬스터와 싸운 다음 마을에 있는 주민을 해방시킨다.
시루의 초기 체력은 K이고, 마을 i를 방문하기 전에 마을 1, 2, ..., k를 방문했다면,
마을 i에서 몬스터와 싸울 때 A{1} + A{2} + ... + A{k} + A{i}만큼의 체력을 소모한다.
시루의 체력이 0보다 작아지는 경우, 주민을 해방시키지 못하고 게임이 종료된다.

모든 마을의 주민을 해방시키는 것은 불가능할 수 있기 때문에, 시루는 체력을 최대 K만큼만 소모하면서 최대한 많은 주민을 해방시키려고 한다.
시루가 해방시킬 수 있는 주민들의 최대 수를 구해보자.

입력
첫째 줄에 몬스터의 수 N과 시루의 초기 체력 K가 공백으로 구분되어 주어진다.

둘째 줄에 각 마을에 있는 몬스터의 공격력 A1, A2, ..., AN이 공백으로 구분되어 주어진다.

셋째 줄에 각 마을에 있는 주민의 수 P1, P2, ..., PN이 공백으로 구분되어 주어진다.

출력
시루가 해방시킬 수 있는 주민들의 최대 수를 출력한다. 만약 주민을 해방시킬 수 없다면 0을 출력한다.
 1 < N < 20 
 1 < K < 100,000 
 1 < A < 100,000 
 1 < P < 100,000 

5 5 // 몬스터 수, 시루 체력
5 3 1 2 4 // 몬스터 공격력
10 10 10 10 10 // 마을 주민 수   / 20

5 100
1 1 1 1 1
10 10 10 10 10   / 50

5 1
2 2 2 2 2
2 2 2 2 2   / 0

[0, 0] = 몬스터 수
[0, 1] =체력
[1, x] = 몬스터의 공격력
[2, y] = 주민 수

주민수가 가장 많은 값을 리턴

1. 몬스터 수만큼 반복문을 실행
2. (시루의 체력 - 몬스터의 공격력)이 0보다 크면 해당 마을 주민 수를 더함.
3. 0번마을부터 n번마을까지 재귀해서
4. 가장 큰 값을 리턴.

*/

const case1 = [
  [5, 5],
  [5, 3, 1, 2, 4],
  [10, 10, 10, 10, 10],
]; // 20
const case2 = [
  [5, 100],
  [1, 1, 1, 1, 1],
  [10, 10, 10, 10, 10],
]; // 50
const case3 = [
  [5, 1],
  [2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2],
]; // 0

var fs = require("fs");
var input = fs.readFileSync("/dev/stdin").toString().trim().split("\n");
function cote(info) {
  const hp = info[0][1];
  const monsters = info[0][0];
  const attack = info[1];
  const people = info[2];

  function dungeon(restHp, result, town) {
    if (town === monsters - 1) {
      return result;
    }
    let savedPeople = 0;
    for (let i = town; i <= monsters; i++) {
      restHp = restHp - attack[i];
      if (restHp >= 0) {
        savedPeople = savedPeople + people[i];
      } else {
        restHp = restHp + attack[i];
      }
    }
    return dungeon(hp, Math.max(result, savedPeople), town + 1);
  }
  return dungeon(hp, 0, 0);
}

console.log(cote(input));
// console.log(cote(test2));
// console.log(cote(test3));
